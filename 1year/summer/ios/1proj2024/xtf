#!/bin/bash
POSIXLY_CORRECT=yes



#Setting up default "empty" values for each variable
after_date=""
before_date=""
currency=""
user=""
command=""




# Print script instructions
function Print_Help()
{
	echo "Usage: xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]"
}

function List()
{
    awk -F ';' -v username="$1" -v after_date="$2" -v before_date="$3" -v currency="$4" '
        
        {
            if (after_date == "")
            {
                after_date = "00-00-00 00:00:00"
            }

            if (before_date == "")
            {
                before_date = "9999-99-99 99:99:99"
            }

            if (!match($2, /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/))
            {
                print "Logs: date format error!"  > "/dev/stderr"
                exit(1)
            }

            if ($1 == "")
            {
                print "Logs: empty name!"  > "/dev/stderr"
                exit(1)
            }

            if ($1 == username)
            {
                if ($2 > after_date && $2 < before_date)
                {
                    if (currency == "")
                    {
                        print $0
                    }
                    else
                    {
                        if ($3 == currency)
                        {
                            print $0
                        }
                    }
                    
                }
            }
        }
        ' <(for file in "${@:5}"; do if [[ "$file" == *.gz ]]; then gunzip -ck "$file"; else cat "$file"; fi; done)
}


# 
function List_Currency()
{
    awk -F ';' -v username="$1" -v after_date="$2" -v before_date="$3" -v currency="$4" '
    
        
        {
            if (after_date == "")
            {
                after_date = "0000-00-00 00:00:00"
            }

            if (before_date == "")
            {
                before_date = "9999-09-09 00:00:00"
            }

            if (!match($2, /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/))
            {
                print "Logs: date format error!"  > "/dev/stderr"
                exit(1)
            }

            if ($1 == "")
            {
                exit(1)
            }

            if ($1 == username)
            {
                if ($2 > after_date && $2 < before_date)
                {
                    if (currency == "")
                    {
                        if (!($3 in array))
                        {
                            array[$3] = 1;
                        }
                    }
                    else
                    {
                        if ($3 == currency)
                        {
                            if (!($3 in array))
                            {
                                array[$3] = 1;
                            }
                        }
                    }
                    
                }
            }
        }
        END {
            for (key in array) 
            {
                print key;
            }
        }' <(for file in "${@:5}"; do if [[ "$file" == *.gz ]]; then gunzip -ck "$file"; else cat "$file"; fi; done) | sort
}



# For each line:
# Move currency to currencies array if it isnt there yet
# Add to sum array
# Go forward
function Status()
{
    awk -F ';' -v username="$1" -v after_date="$2" -v before_date="$3" -v currency="$4" '
        BEGIN{
            split("", currencies)
            split("", amounts)
        } 

        {
            if (after_date == "")
            {
                after_date = "0000-00-00 00:00:00"
            }

            if (before_date == "")
            {
                before_date = "9999-09-09 00:00:00"
            }

            if (!match($2, /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/))
            {
                print "Logs: date format error!"  > "/dev/stderr"
                exit(1)
            }

            if ($1 == "")
            {
                exit(1)
            }

            if ($1 == username)
            {
                
                if ($2 > after_date && $2 < before_date)
                {
                    if (currency == "")
                    {
                        
                        if ($3 in currencies) 
                        {
                            
                            amount[$3] += $4
                        } else 
                        {
                            currencies[$3] = $3
                            amount[$3] = $4
                        }
                    }
                    else
                    {
                        if ($3 == currency)
                        {
                            if ($3 in currencies) 
                            {
                                
                                amount[$3] += $4
                            } else 
                            {
                                currencies[$3] = $3
                                amount[$3] = $4
                            }
                        }
                    }
                    
                }
            }
        }
        END {

        
        for (i in currencies) {
            printf "%s : %.4f\n", currencies[i], amount[currencies[i]]
        }
        }
        ' <(for file in "${@:5}"; do if [[ "$file" == *.gz ]]; then gunzip -ck "$file"; else cat "$file"; fi; done) | sort
}


function Profit()
{
    awk -F ';' -v username="$1" -v after_date="$2" -v before_date="$3" -v currency="$4" -v profit="$XTF_PROFIT" '
        BEGIN{
            split("", currencies)
            split("", amounts)
        } 

        {
            if (after_date == "")
            {
                after_date = "0000-00-00 00:00:00"
            }

            if (before_date == "")
            {
                before_date = "9999-09-09 00:00:00"
            }

            if (!match($2, /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/))
            {
                print "Logs: date format error!"  > "/dev/stderr"
                exit(1)
            }

            if ($1 == "")
            {
                exit(1)
            }

            if ($1 == username)
            {
                
                if ($2 > after_date && $2 < before_date)
                {
                    if (currency == "")
                    {
                        
                        if ($3 in currencies) 
                        {
                            
                            amount[$3] += $4
                        } else 
                        {
                            # Currency does not exist
                            currencies[$3] = $3
                            amount[$3] = $4
                        }
                    }
                    else
                    {
                        if ($3 == currency)
                        {
                            if ($3 in currencies) 
                            {
                                
                                amount[$3] += $4
                            } else 
                            {
                                # Currency does not exit in list
                                currencies[$3] = $3
                                amount[$3] = $4
                            }
                        }
                    }
                    
                }
            }
        }
        END {

        
        # Print
        for (i in currencies) {
            if (amount[currencies[i]] > 0)
            {
                printf "%s : %.4f\n", currencies[i], amount[currencies[i]]*profit*0.01+amount[currencies[i]]
            }
            else
            {
                printf "%s : %.4f\n", currencies[i], amount[currencies[i]]
            }
            
        }
        }
        ' <(for file in "${@:5}"; do if [[ "$file" == *.gz ]]; then gunzip -ck "$file"; else cat "$file"; fi; done) | sort
}

# Process short and long paramatres using getopt
arguments=$(getopt -o ha:b:c: --long help -n "$0" -- "$@")

# Error check
if [ $? -ne 0 ]; then
    echo "ERROR! Incorrect syntaxe of parametres!" >&2
    exit 1
fi

# Set positional parametres
eval set -- "$arguments"


# Main loop for parametres
while true; do
    case "$1" in
        -h|--help)
            Print_Help
            shift 1
            exit 0
            ;;
        -a)
            if [[ "$2" =~ ^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\ [0-9][0-9]:[0-9][0-9]:[0-9][0-9]$ ]]; then
                after_date="$2"
            else
                echo "Wrong date format" >&2
                exit 1
            fi
            shift 2
            ;;
        -b)
            if [[ "$2" =~ ^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\ [0-9][0-9]:[0-9][0-9]:[0-9][0-9]$ ]]; then
                before_date="$2"
            else
                echo "Wrong date format" >&2
                exit 1
            fi
            shift 2
            ;;
        -c)
            currency="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Wrong arguments! See <--help>..." >&2
            exit 1
            ;;
    esac
done


# Get command value or set it to default
case "$1" in
    "list"|"list-currency"|"status"|"profit")
        command="$1"
        shift 1
        ;;
    *)
        command="list"
        ;;
esac


if [ -z "$1" ]; then
    echo "Wrong username!" >&2
    exit 1
fi
username="$1"
shift 1

if [ "$#" -eq 0 ]; then
    echo "Error, no log files!" >&2
    exit 1
fi



# Check every logfile name
for logfile in "$@"; do
    if [ ! -f "$logfile" ]; then
        echo "Error, file $logfile does not exist!" >&2
        exit 1
    fi  
done

if [ -z "$XTF_PROFIT" ]; then
    XTF_PROFIT="20"
fi




case "$command" in
            list)
                List "$username" "$after_date" "$before_date" "$currency" "$@"
                ;;
            list-currency)
                List_Currency "$username" "$after_date" "$before_date" "$currency" "$@"
                ;;
            status)
                Status "$username" "$after_date" "$before_date" "$currency" "$@"
                ;;
            profit)
                Profit "$username" "$after_date" "$before_date" "$currency" "$@"
                ;;
        esac

















